"""Create complete initial schema

Revision ID: 468c8900f6c8
Revises: 
Create Date: 2025-07-10 16:45:12.809663

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '468c8900f6c8'
down_revision: Union[str, Sequence[str], None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('organizations',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('name', sa.String(length=100), nullable=False),
    sa.Column('address', sa.Text(), nullable=True),
    sa.Column('tax_code', sa.String(length=20), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_organizations_tax_code'), 'organizations', ['tax_code'], unique=True)
    op.create_table('roles',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('name', sa.String(length=50), nullable=False),
    sa.Column('description', sa.String(length=255), nullable=True),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('name')
    )
    op.create_table('drivers',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('organization_id', sa.UUID(), nullable=False),
    sa.Column('full_name', sa.String(length=100), nullable=False),
    sa.Column('license_number', sa.String(length=50), nullable=False),
    sa.Column('card_id', sa.String(length=50), nullable=True),
    sa.Column('phone_number', sa.String(length=20), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.ForeignKeyConstraint(['organization_id'], ['organizations.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_drivers_card_id'), 'drivers', ['card_id'], unique=True)
    op.create_index(op.f('ix_drivers_license_number'), 'drivers', ['license_number'], unique=True)
    op.create_table('users',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('organization_id', sa.UUID(), nullable=False),
    sa.Column('role_id', sa.UUID(), nullable=True),
    sa.Column('username', sa.String(length=50), nullable=False),
    sa.Column('email', sa.String(length=100), nullable=False),
    sa.Column('hashed_password', sa.String(length=255), nullable=False),
    sa.Column('full_name', sa.String(length=100), nullable=True),
    sa.Column('is_active', sa.Boolean(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True),
    sa.ForeignKeyConstraint(['organization_id'], ['organizations.id'], ),
    sa.ForeignKeyConstraint(['role_id'], ['roles.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_users_email'), 'users', ['email'], unique=True)
    op.create_index(op.f('ix_users_username'), 'users', ['username'], unique=True)
    op.create_table('vehicles',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('organization_id', sa.UUID(), nullable=False),
    sa.Column('plate_number', sa.String(length=20), nullable=False),
    sa.Column('type', sa.String(length=50), nullable=True),
    sa.Column('load_capacity_kg', sa.Integer(), nullable=True),
    sa.Column('registration_expiry', sa.Date(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.ForeignKeyConstraint(['organization_id'], ['organizations.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_vehicles_plate_number'), 'vehicles', ['plate_number'], unique=True)
    op.create_table('alerts',
    sa.Column('id', sa.BigInteger(), nullable=False),
    sa.Column('vehicle_id', sa.UUID(), nullable=False),
    sa.Column('alert_type', sa.String(length=50), nullable=False),
    sa.Column('timestamp', sa.DateTime(timezone=True), nullable=False),
    sa.Column('details', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('is_acknowledged', sa.Boolean(), nullable=False),
    sa.ForeignKeyConstraint(['vehicle_id'], ['vehicles.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_alerts_alert_type'), 'alerts', ['alert_type'], unique=False)
    op.create_index(op.f('ix_alerts_timestamp'), 'alerts', ['timestamp'], unique=False)
    op.create_table('devices',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('vehicle_id', sa.UUID(), nullable=True),
    sa.Column('imei', sa.String(length=50), nullable=False),
    sa.Column('serial_number', sa.String(length=50), nullable=True),
    sa.Column('firmware_version', sa.String(length=20), nullable=True),
    sa.Column('installed_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.ForeignKeyConstraint(['vehicle_id'], ['vehicles.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('serial_number'),
    sa.UniqueConstraint('vehicle_id')
    )
    op.create_index(op.f('ix_devices_imei'), 'devices', ['imei'], unique=True)
    op.create_table('images',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('vehicle_id', sa.UUID(), nullable=False),
    sa.Column('timestamp', sa.DateTime(timezone=True), nullable=False),
    sa.Column('storage_path', sa.String(length=512), nullable=False),
    sa.Column('type', sa.Enum('image', 'video', name='imagetypeenum'), nullable=False),
    sa.Column('event_type', sa.String(length=50), nullable=True),
    sa.ForeignKeyConstraint(['vehicle_id'], ['vehicles.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('journey_sessions',
    sa.Column('id', sa.BigInteger(), nullable=False),
    sa.Column('vehicle_id', sa.UUID(), nullable=False),
    sa.Column('driver_id', sa.UUID(), nullable=False),
    sa.Column('start_time', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('end_time', sa.DateTime(timezone=True), nullable=True),
    sa.Column('total_distance_km', sa.Numeric(precision=10, scale=2), nullable=True),
    sa.Column('notes', sa.Text(), nullable=True),
    sa.ForeignKeyConstraint(['driver_id'], ['drivers.id'], ),
    sa.ForeignKeyConstraint(['vehicle_id'], ['vehicles.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    # ###
    # Create the locations hypertable manually
    # ###
    op.create_table('locations',
        sa.Column('time', sa.DateTime(timezone=True), nullable=False),
        sa.Column('device_imei', sa.String(length=50), nullable=False),
        sa.Column('latitude', sa.Float(), nullable=False),
        sa.Column('longitude', sa.Float(), nullable=False),
        sa.Column('speed_kph', sa.SmallInteger(), nullable=True),
        sa.Column('heading', sa.SmallInteger(), nullable=True),
        sa.Column('engine_status', sa.Boolean(), nullable=True),
        sa.Column('fuel_level', sa.SmallInteger(), nullable=True),
        sa.Column('altitude_m', sa.Float(), nullable=True),
        sa.Column('satellite_count', sa.SmallInteger(), nullable=True),
        sa.PrimaryKeyConstraint('time', 'device_imei')
    )
    # Execute the TimescaleDB function to convert the table to a hypertable
    op.execute("SELECT create_hypertable('locations', 'time');")
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('journey_sessions')
    op.drop_table('images')
    op.drop_index(op.f('ix_devices_imei'), table_name='devices')
    op.drop_table('devices')
    op.drop_index(op.f('ix_alerts_timestamp'), table_name='alerts')
    op.drop_index(op.f('ix_alerts_alert_type'), table_name='alerts')
    op.drop_table('alerts')
    op.drop_index(op.f('ix_vehicles_plate_number'), table_name='vehicles')
    op.drop_table('vehicles')
    op.drop_index(op.f('ix_users_username'), table_name='users')
    op.drop_index(op.f('ix_users_email'), table_name='users')
    op.drop_table('users')
    op.drop_index(op.f('ix_drivers_license_number'), table_name='drivers')
    op.drop_index(op.f('ix_drivers_card_id'), table_name='drivers')
    op.drop_table('drivers')
    op.drop_table('roles')
    op.drop_index(op.f('ix_organizations_tax_code'), table_name='organizations')
    op.drop_table('organizations')
    # Manually add the drop for locations table
    op.drop_table('locations')
    # ### end Alembic commands ###
